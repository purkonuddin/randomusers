{"version":3,"sources":["redux/actions/users.js","component/Loader.js","component/users.js"],"names":["require","config","Loader","Alert","variant","className","Heading","Spinner","animation","initialState","currPage","postsPerPage","posts","pageCount","offset","data","perPage","currentPage","loadingSearch","image_file","imageName","fetching","currentlyDisplayed","Users","props","getEvents","a","dispatch","type","payload","axios","method","url","users","fetchUsers","isFulfilled","setState","convertDate","params","convert","Date","toISOString","substr","split","receivedData","slice","state","postData","map","pd","i","Fragment","Card","id","login","username","style","width","marginInline","marginBlockEnd","Header","Row","Col","color","xs","lg","icon","faEllipsisV","Body","md","Img","src","picture","large","Title","Text","name","title","first","last","phone","dob","date","email","Math","ceil","length","componentDidMount","handlePageClick","e","selectedPage","selected","this","Container","Button","faSearch","faPlus","justifyContent","previousLabel","nextLabel","breakLabel","breakClassName","marginPagesDisplayed","pageRangeDisplayed","onPageChange","containerClassName","subContainerClassName","activeClassName","Component","connect"],"mappings":"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","file":"static/js/6.27a988f0.chunk.js","sourcesContent":["import axios from 'axios';\r\nrequire('dotenv').config();\r\nconst react_app_url = \"https://randomuser.me/api/?results=28\"\r\n \r\nexport const fetchUsers = () => {\r\n    return {\r\n      type: 'GET_USERS',\r\n      payload: axios({\r\n        method: 'GET',\r\n        url: `${react_app_url}` \r\n      })\r\n    }\r\n}","import React from 'react'; \r\nimport {Alert, Spinner} from \"react-bootstrap\";\r\n\r\nfunction Loader() {\r\n  return (\r\n    <div>\r\n      <Alert variant=\"info\" className=\"mt-2\">\r\n        <Alert.Heading><Spinner animation=\"grow\" />{' '}Fetching Users Personnels...</Alert.Heading>\r\n        \r\n      </Alert>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Loader;","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\"; \r\nimport { fetchUsers } from '../redux/actions/users'; \r\nimport Loader from \"./Loader\";\r\nimport ReactPaginate from 'react-paginate';\r\nimport {Container, Row, Col, Button, Card} from \"react-bootstrap\";\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { \r\n    faSearch, \r\n    faPlus,  \r\n    faEllipsisV\r\n} from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst initialState = { \r\n    currPage: 1,\r\n    postsPerPage: 5,\r\n    posts:[],\r\n    pageCount: 0,\r\n    offset: 0,\r\n    data: [],\r\n    perPage: 4,\r\n    currentPage: 0,\r\n    loadingSearch: false,\r\n    image_file:null,\r\n    imageName: '',\r\n    fetching: false,\r\n    currentlyDisplayed: []\r\n};\r\n\r\nclass Users extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = initialState; \r\n    }  \r\n    getEvents = async () => {  \r\n        await this.props.dispatch(fetchUsers());\r\n        if(this.props.users.fetchUsers.isFulfilled){\r\n        this.setState({ \r\n            currentlyDisplayed: this.props.users.fetchUsers.data\r\n          }); \r\n        }\r\n    };  \r\n\r\n    convertDate=(params)=> { \r\n        const date = new Date(params); \r\n        const arrWaktu = date.toISOString().substr(0, 10);\r\n        const convert = arrWaktu.split(\"-\"); \r\n        return `${convert[2]} ${convert[1]} `\r\n    }\r\n    \r\n    receivedData = async ()=> {\r\n        // await this.getEvents()\r\n        if(this.props.users.fetchUsers.isFulfilled){\r\n            let data = this.props.users.fetchUsers.data\r\n            const slice = data.slice(this.state.offset, this.state.offset + this.state.perPage)\r\n            const postData = slice.map((pd, i) => <React.Fragment> \r\n                <Card key={pd.login.username} id={pd.login.username} style={{ width: '15rem', marginInline: '0.5em', marginBlockEnd: '0.5em' }}>\r\n                    <Card.Header className=\"bg-transparent\">\r\n                        <Row>\r\n                            <Col>Personnel ID : <span style={{color: '#5abfb6'}}>{pd.login.username}</span></Col>\r\n                            <Col xs={1} lg={1}><FontAwesomeIcon icon={faEllipsisV} /></Col>\r\n                        </Row>\r\n                    </Card.Header>\r\n                    <Card.Body>\r\n                        <Row>\r\n                            <Col xs={4} md={12} lg={12} id=\"foto-cards\">\r\n                                <Card.Img variant=\"top\" src={pd.picture.large} className=\"rounded-circle mb-2\"/>\r\n                            </Col>\r\n                            <Col xs={8} md={12} lg={12}>\r\n                                <Card.Title>Name</Card.Title>\r\n                                <Card.Text> {pd.name.title}{' '}{pd.name.first}{' '}{pd.name.last} </Card.Text> \r\n                                <Card.Title>Telephone</Card.Title>\r\n                                <Card.Text> {pd.phone} </Card.Text> \r\n                                <Card.Title className=\"d-none d-sm-block\">Birthday </Card.Title>\r\n                                <Card.Text className=\"d-none d-sm-block\"> {this.convertDate(pd.dob.date)} </Card.Text> \r\n                                <Card.Title className=\"d-none d-sm-block\">Email</Card.Title>\r\n                                <Card.Text className=\"d-none d-sm-block\"> {pd.email} </Card.Text> \r\n                            </Col>\r\n                        </Row>\r\n                    </Card.Body>\r\n                </Card>\r\n            </React.Fragment>)\r\n    \r\n            this.setState({\r\n                pageCount: Math.ceil(data.length / this.state.perPage),\r\n            \r\n                postData\r\n            })\r\n        }\r\n    }\r\n    componentDidMount = async () => { \r\n        await this.getEvents()\r\n        await this.receivedData()\r\n    }\r\n\r\n    handlePageClick = (e) => {\r\n        this.setState({loadingSearch: false})\r\n        const selectedPage = e.selected;\r\n        const offset = selectedPage * this.state.perPage;\r\n    \r\n        this.setState({\r\n            currentPage: selectedPage,\r\n            offset: offset\r\n        }, () => {\r\n            this.receivedData()\r\n        });\r\n    \r\n    };\r\n\r\n    render() {  \r\n\r\n        if(!this.props.users.fetchUsers.isFulfilled){\r\n            return <Loader/>\r\n        }\r\n        return(\r\n            <Container>\r\n                <Row id=\"user-top\" className=\"bg-white mb-5 ml-0 mr-0 mt-5 p-3\">\r\n                    <Col xs={12} lg={6} id=\"judul\">\r\n                        <h1>PERSONNEL LIST</h1>\r\n                        <label>List of all personnels</label>\r\n                    </Col>\r\n                    <Col xs={12} lg={6} id=\"cari-tambah-btn\">\r\n                        <Button xs={12} lg={6} variant=\"outline-success\"><span className=\"text-info\"><FontAwesomeIcon icon={faSearch} />{' '}</span>Find Personnel</Button>{' '}\r\n                        <Button xs={12} lg={6} variant=\"info\">Add Personnel{' '}<FontAwesomeIcon icon={faPlus} /></Button>{' '}\r\n                    </Col>\r\n                </Row>\r\n                <Row className=\"mb-5 ml-0 mr-0 mt-5\" style={{justifyContent: 'space-between'}}>\r\n                {\r\n                    this.state.postData\r\n                }\r\n                </Row>\r\n                <Row className=\"justify-content-center\">\r\n                    <div id=\"paginate\" className=\"\"> \r\n                        {/* Using React Paginate */} \r\n                        <div>\r\n                            <ReactPaginate\r\n                            previousLabel={'< Previous Page'}\r\n                            nextLabel={'Next Page >'}\r\n                            breakLabel={\" \"}\r\n                            breakClassName={\"break-me\"}\r\n                            pageCount={this.state.pageCount}\r\n                            marginPagesDisplayed={0}\r\n                            pageRangeDisplayed={0}\r\n                            onPageChange={this.handlePageClick}\r\n                            containerClassName={\"pagination\"}\r\n                            subContainerClassName={\"pages pagination\"}\r\n                            activeClassName={\"btn active d-none\"}/>\r\n                        </div>\r\n                    </div>\r\n                </Row>\r\n            </Container>\r\n        )\r\n    }\r\n};\r\n// export default Users;\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        users: state.users\r\n    };\r\n  };\r\n  \r\nexport default connect(mapStateToProps)(Users);"],"sourceRoot":""}